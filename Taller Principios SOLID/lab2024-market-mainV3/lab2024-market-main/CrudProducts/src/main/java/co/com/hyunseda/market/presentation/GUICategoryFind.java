/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package co.com.hyunseda.market.presentation;

import co.com.hyunseda.market.service.Category;
import co.com.hyunseda.market.service.ICategoryService;

import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juan
 */
public class GUICategoryFind extends javax.swing.JDialog {
    private ICategoryService categoryService;

    public GUICategoryFind(java.awt.Frame parent, boolean modal, ICategoryService categoryService) {
        super(parent,modal);
        initComponents();
        initializeTable();
        this.categoryService = categoryService;
        setLocationRelativeTo(null);
         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }
    private void initializeTable() {
        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Name"
                }
        ));
    }
    private void fillTable(List<Category> listCategories) {
        initializeTable();
        DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();

        Object rowData[] = new Object[3];//No columnas
        for (int i = 0; i < listCategories.size(); i++) {
            rowData[0] = listCategories.get(i).getCategoryId();
            rowData[1] = listCategories.get(i).getName();

            model.addRow(rowData);
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        botones = new javax.swing.ButtonGroup();
        pnlCenter = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategory = new javax.swing.JTable();
        pnlNorth = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rdoId = new javax.swing.JRadioButton();
        rdoName = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnSearchAll = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pnlCenter.setLayout(new java.awt.BorderLayout());

        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCategory);

        pnlCenter.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Buscar por:");
        pnlNorth.add(jLabel1);

        rdoId.setSelected(true);
        rdoId.setText("Id");
        rdoId.setName(""); // NOI18N
        rdoId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoIdActionPerformed(evt);
            }
        });
        pnlNorth.add(rdoId);

        rdoName.setText("Nombre del producto");
        rdoName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNameActionPerformed(evt);
            }
        });
        pnlNorth.add(rdoName);

        txtSearch.setPreferredSize(new java.awt.Dimension(62, 32));
        pnlNorth.add(txtSearch);

        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnlNorth.add(btnSearch);

        btnSearchAll.setText("Buscar Todos");
        btnSearchAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAllActionPerformed(evt);
            }
        });
        pnlNorth.add(btnSearchAll);

        btnClose.setText("Cerrar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        jPanel1.add(btnClose);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 811, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlNorth, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pnlCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlNorth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(pnlCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdoIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoIdActionPerformed

        // Habilitar la casilla de búsqueda por ID si está seleccionada
        if (rdoId.isSelected()) {
            txtSearch.setEnabled(true);
            txtSearch.setText(""); // Limpiar el texto de búsqueda
            txtSearch.requestFocus(); // Colocar el foco en la casilla de búsqueda
        } else {
            // Deshabilitar la casilla de búsqueda por ID si no está seleccionada
            txtSearch.setEnabled(false);
            txtSearch.setText(""); // Limpiar el texto de búsqueda
        }
    }//GEN-LAST:event_rdoIdActionPerformed

    private void rdoNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNameActionPerformed
        if (rdoName.isSelected()) {
            txtSearch.setEnabled(true);
            txtSearch.setText(""); // Limpiar el texto de búsqueda
            txtSearch.requestFocus(); // Colocar el foco en la casilla de búsqueda
        } else {
            // Deshabilitar la casilla de búsqueda por nombre si no está seleccionada
            txtSearch.setEnabled(false);
            txtSearch.setText(""); // Limpiar el texto de búsqueda
        }
    }//GEN-LAST:event_rdoNameActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        // Verificar si se seleccionó la búsqueda por ID
        if (rdoId.isSelected()) {
            // Obtener el texto ingresado por el usuario en la casilla de búsqueda
            String searchText = txtSearch.getText().trim();

            // Verificar si el campo de búsqueda no está vacío
            if (!searchText.isEmpty()) {
                try {
                    // Convertir el texto a un Long (ID)
                    Long categoryId = Long.parseLong(searchText);

                    // Realizar la búsqueda por ID
                    Category foundCategory = categoryService.findCategoryById(categoryId);

                    // Verificar si se encontró el producto
                    if (foundCategory != null) {
                        // Limpiar la tabla y agregar el producto encontrado
                        DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();
                        model.setRowCount(0); // Limpiar la tabla
                        model.addRow(new Object[]{foundCategory.getCategoryId(), foundCategory.getName()});
                    } else {
                        // Mostrar un mensaje indicando que no se encontró el producto
                        JOptionPane.showMessageDialog(this, "No se encontró ninguna categoria con el ID especificado.", "Categoria no encontrada", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    // Mostrar un mensaje de error si el texto ingresado no es un número válido
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Mostrar un mensaje indicando que el campo de búsqueda está vacío
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID para buscar.", "Campo vacío", JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (rdoName.isSelected()) {
            String searchText=txtSearch.getText().trim();
            if(!searchText.isEmpty()){
                try{
                    Category foundCategory = categoryService.findCategoryByName(searchText);

                    if(foundCategory!=null){
                        DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();
                        model.setRowCount(0); // Limpiar la tabla
                        model.addRow(new Object[]{foundCategory.getCategoryId(), foundCategory.getName()});
                    }
                    else {
                        // Mostrar un mensaje indicando que no se encontró el producto
                        JOptionPane.showMessageDialog(this, "No se encontró ninguna categoria con el nombre especificado.", "Categoria no encontrada", JOptionPane.INFORMATION_MESSAGE);
                    }
                }catch (NumberFormatException e) {
                    // Mostrar un mensaje de error si el texto ingresado no es un número válido
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese un nombre válido.","Error", JOptionPane.ERROR_MESSAGE);
                }

            }

            else {

                JOptionPane.showMessageDialog(this, "Por favor, ingrese un nombre para buscar .", "Campo vacio", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSearchAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAllActionPerformed
        fillTable(categoryService.findAllCategories());
    }//GEN-LAST:event_btnSearchAllActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
  


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup botones;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchAll;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlNorth;
    private javax.swing.JRadioButton rdoId;
    private javax.swing.JRadioButton rdoName;
    private javax.swing.JTable tblCategory;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
